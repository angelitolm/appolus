{"ast":null,"code":"var _jsxFileName = \"/home/angelito/Devs/appolus-master/src/App.js\";\nimport React from \"react\";\nimport { Provider } from \"react-redux\";\nimport { BrowserRouter as Router, Route, Switch } from \"react-router-dom\";\nimport jwt_decode from \"jwt-decode\";\nimport setAuthToken from \"./util/setAuthToken\";\nimport { setCurrentUser, logoutUser } from \"./constants/authActions\";\nimport store from \"./redux/store\";\nimport ReactDOM from 'react-dom';\nimport App from \"./containers/App\"; // Check for token to keep user logged in\n\nif (localStorage.jwtToken) {\n  // Set auth token header auth\n  const token = localStorage.jwtToken;\n  setAuthToken(token); // Decode token and get user info and exp\n\n  const decoded = jwt_decode(token); // Set user and isAuthenticated\n\n  store.dispatch(setCurrentUser(decoded)); // Check for expired token\n\n  const currentTime = Date.now() / 1000; // to get in milliseconds\n\n  if (decoded.exp < currentTime) {\n    // Logout user\n    store.dispatch(logoutUser()); // Redirect to login\n\n    window.location.href = \"/signin\";\n  }\n} // <Route path=\"/\" component={App} />\n\n\nconst MainApp = () => React.createElement(Provider, {\n  store: store,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 38\n  },\n  __self: this\n}, React.createElement(Router, {\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 39\n  },\n  __self: this\n}, React.createElement(Switch, {\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 40\n  },\n  __self: this\n}, React.createElement(Route, {\n  path: \"/\",\n  component: App,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 41\n  },\n  __self: this\n}))));\n\nexport default ReactDOM.render(React.createElement(MainApp, {\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 47\n  },\n  __self: this\n}), document.getElementById(\"root\"));","map":{"version":3,"sources":["/home/angelito/Devs/appolus-master/src/App.js"],"names":["React","Provider","BrowserRouter","Router","Route","Switch","jwt_decode","setAuthToken","setCurrentUser","logoutUser","store","ReactDOM","App","localStorage","jwtToken","token","decoded","dispatch","currentTime","Date","now","exp","window","location","href","MainApp","render","document","getElementById"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,QAAT,QAAyB,aAAzB;AACA,SAASC,aAAa,IAAIC,MAA1B,EAAkCC,KAAlC,EAAyCC,MAAzC,QAAuD,kBAAvD;AACA,OAAOC,UAAP,MAAuB,YAAvB;AACA,OAAOC,YAAP,MAAyB,qBAAzB;AACA,SAASC,cAAT,EAAyBC,UAAzB,QAA2C,yBAA3C;AACA,OAAOC,KAAP,MAAkB,eAAlB;AAEA,OAAOC,QAAP,MAAqB,WAArB;AAEA,OAAOC,GAAP,MAAgB,kBAAhB,C,CAEA;;AACA,IAAIC,YAAY,CAACC,QAAjB,EAA2B;AACzB;AACA,QAAMC,KAAK,GAAGF,YAAY,CAACC,QAA3B;AACAP,EAAAA,YAAY,CAACQ,KAAD,CAAZ,CAHyB,CAIzB;;AACA,QAAMC,OAAO,GAAGV,UAAU,CAACS,KAAD,CAA1B,CALyB,CAMzB;;AACAL,EAAAA,KAAK,CAACO,QAAN,CAAeT,cAAc,CAACQ,OAAD,CAA7B,EAPyB,CAQzB;;AACA,QAAME,WAAW,GAAGC,IAAI,CAACC,GAAL,KAAa,IAAjC,CATyB,CASa;;AACtC,MAAIJ,OAAO,CAACK,GAAR,GAAcH,WAAlB,EAA+B;AAC7B;AACAR,IAAAA,KAAK,CAACO,QAAN,CAAeR,UAAU,EAAzB,EAF6B,CAI7B;;AACAa,IAAAA,MAAM,CAACC,QAAP,CAAgBC,IAAhB,GAAuB,SAAvB;AACD;AACF,C,CAID;;;AAEA,MAAMC,OAAO,GAAG,MACd,oBAAC,QAAD;AAAU,EAAA,KAAK,EAAEf,KAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GACA,oBAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GACI,oBAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GACF,oBAAC,KAAD;AAAO,EAAA,IAAI,EAAC,GAAZ;AAAgB,EAAA,SAAS,EAAEE,GAA3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EADE,CADJ,CADA,CADF;;AASA,eAAgBD,QAAQ,CAACe,MAAT,CACd,oBAAC,OAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EADc,EAEdC,QAAQ,CAACC,cAAT,CAAwB,MAAxB,CAFc,CAAhB","sourcesContent":["import React from \"react\";\nimport { Provider } from \"react-redux\";\nimport { BrowserRouter as Router, Route, Switch } from \"react-router-dom\";\nimport jwt_decode from \"jwt-decode\"\nimport setAuthToken from \"./util/setAuthToken\"\nimport { setCurrentUser, logoutUser } from \"./constants/authActions\"\nimport store from \"./redux/store\";\n\nimport ReactDOM from 'react-dom';\n\nimport App from \"./containers/App\";\n\n// Check for token to keep user logged in\nif (localStorage.jwtToken) {\n  // Set auth token header auth\n  const token = localStorage.jwtToken\n  setAuthToken(token);\n  // Decode token and get user info and exp\n  const decoded = jwt_decode(token)\n  // Set user and isAuthenticated\n  store.dispatch(setCurrentUser(decoded))\n  // Check for expired token\n  const currentTime = Date.now() / 1000 // to get in milliseconds\n  if (decoded.exp < currentTime) {\n    // Logout user\n    store.dispatch(logoutUser())\n\n    // Redirect to login\n    window.location.href = \"/signin\"\n  }\n}\n\n\n\n// <Route path=\"/\" component={App} />\n\nconst MainApp = () => (\n  <Provider store={store}>\n  <Router>\n      <Switch>\n    <Route path=\"/\" component={App} />\n    </Switch>\n    </Router>\n  </Provider>\n);\nexport default  ReactDOM.render(\n  <MainApp />,\n  document.getElementById(\"root\")\n);\n"]},"metadata":{},"sourceType":"module"}